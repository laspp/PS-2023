// prevajanje datoteke *.proto na Arnes HPC:
//   - namestitev modulov
//      module load protobuf
//      module load binutils/2.39-GCCcore-12.2.0
//      go install google.golang.org/protobuf/cmd/protoc-gen-go@latest (samo ob prvi uporabi)
//      go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest (samo ob prvi uporabi)
//      export PATH="$PATH:$(go env GOPATH)/bin"
//   - prevajanje
//      srun protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative protobufStorage.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protobufStorage.proto

package protobufStorage

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CRUD_Create_FullMethodName  = "/protobufStorage.CRUD/Create"
	CRUD_Read_FullMethodName    = "/protobufStorage.CRUD/Read"
	CRUD_Update_FullMethodName  = "/protobufStorage.CRUD/Update"
	CRUD_Delete_FullMethodName  = "/protobufStorage.CRUD/Delete"
	CRUD_ReadAll_FullMethodName = "/protobufStorage.CRUD/ReadAll"
)

// CRUDClient is the client API for CRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRUDClient interface {
	Create(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*empty.Empty, error)
	Read(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*TodoStorage, error)
	Update(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*empty.Empty, error)
	ReadAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CRUD_ReadAllClient, error)
}

type cRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewCRUDClient(cc grpc.ClientConnInterface) CRUDClient {
	return &cRUDClient{cc}
}

func (c *cRUDClient) Create(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CRUD_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDClient) Read(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*TodoStorage, error) {
	out := new(TodoStorage)
	err := c.cc.Invoke(ctx, CRUD_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDClient) Update(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CRUD_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDClient) Delete(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CRUD_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDClient) ReadAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CRUD_ReadAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &CRUD_ServiceDesc.Streams[0], CRUD_ReadAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cRUDReadAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CRUD_ReadAllClient interface {
	Recv() (*Todo, error)
	grpc.ClientStream
}

type cRUDReadAllClient struct {
	grpc.ClientStream
}

func (x *cRUDReadAllClient) Recv() (*Todo, error) {
	m := new(Todo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CRUDServer is the server API for CRUD service.
// All implementations must embed UnimplementedCRUDServer
// for forward compatibility
type CRUDServer interface {
	Create(context.Context, *Todo) (*empty.Empty, error)
	Read(context.Context, *Todo) (*TodoStorage, error)
	Update(context.Context, *Todo) (*empty.Empty, error)
	Delete(context.Context, *Todo) (*empty.Empty, error)
	ReadAll(*empty.Empty, CRUD_ReadAllServer) error
	mustEmbedUnimplementedCRUDServer()
}

// UnimplementedCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedCRUDServer struct {
}

func (UnimplementedCRUDServer) Create(context.Context, *Todo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCRUDServer) Read(context.Context, *Todo) (*TodoStorage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedCRUDServer) Update(context.Context, *Todo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCRUDServer) Delete(context.Context, *Todo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCRUDServer) ReadAll(*empty.Empty, CRUD_ReadAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedCRUDServer) mustEmbedUnimplementedCRUDServer() {}

// UnsafeCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRUDServer will
// result in compilation errors.
type UnsafeCRUDServer interface {
	mustEmbedUnimplementedCRUDServer()
}

func RegisterCRUDServer(s grpc.ServiceRegistrar, srv CRUDServer) {
	s.RegisterService(&CRUD_ServiceDesc, srv)
}

func _CRUD_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Create(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUD_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Read(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUD_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Update(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUD_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Delete(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUD_ReadAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CRUDServer).ReadAll(m, &cRUDReadAllServer{stream})
}

type CRUD_ReadAllServer interface {
	Send(*Todo) error
	grpc.ServerStream
}

type cRUDReadAllServer struct {
	grpc.ServerStream
}

func (x *cRUDReadAllServer) Send(m *Todo) error {
	return x.ServerStream.SendMsg(m)
}

// CRUD_ServiceDesc is the grpc.ServiceDesc for CRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufStorage.CRUD",
	HandlerType: (*CRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CRUD_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _CRUD_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CRUD_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CRUD_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAll",
			Handler:       _CRUD_ReadAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobufStorage.proto",
}
